"""
Computational Thinking for Design 1D Project: PyHangman

F05 Group 03
1005042 Naurana Badalge Axel
1005118 Ian Goh Yiheng
1005147 Hayden Ang Wei En
1005294 Carvalho Andrea Roby
1005297 Mandis Loh Zhi Cheng

"""

# Enable/Disable testing
test = 0

# Import required libraries
from random import randint, sample
import os

def clear_terminal():
  # https://stackoverflow.com/questions/2084508/clear-terminal-in-python
  os.system('cls' if os.name == 'nt' else 'clear')

def header():
  # ASCII Art generated from http://patorjk.com/software/taag/#p=display&f=Doom&t=PyHangMan
  print("""=========================================================
  ______      _   _                  ___  ___            
| ___ \    | | | |                 |  \/  |            
| |_/ /   _| |_| | __ _ _ __   __ _| .  . | __ _ _ __  
|  __/ | | |  _  |/ _` | '_ \ / _` | |\/| |/ _` | '_ \ 
| |  | |_| | | | | (_| | | | | (_| | |  | | (_| | | | |
\_|   \__, \_| |_/\__,_|_| |_|\__, \_|  |_/\__,_|_| |_|
       __/ |                   __/ |                   
      |___/                   |___/  
=========================================================""")

def how_to_play():
  clear_terminal()
  header()
  input("""
---Game Modes---
1. Single player
  Category and word will be randomly generated by the computer.
2. Two player
  Users will take turn to enter category and word for the other player to guess.

---How to play---
  * With the given category, word length and visible letters, guess the word.
  * On every turn, enter a letter as a guess.
  * If the letter is found in the word, all instances of that letter will appear in their respective positions.
  * If the letter is not found in the word, the number of strokes of the hangman will increase.
  * The guessing continues until the word is solved or when the game is over.
  * The game ends when the hangman is fully drawn.
  Press enter to return to main menu\n""")
  return

def main_menu():
  option = 0

  while 1:
    print("1. 1 Player game (computer chooses word)")
    print("2. 2 Player game (player 1 chooses word for player 2 to guess)")
    print("3. How to play?")
    option = input("Select an option: ")
    if option in ["1", "2"]:
      break
    elif option == "3":
      how_to_play()
    else:
      print(">>> Invalid input!")

  return int(option)

def generate_answer():
  with open("words.csv") as f:
    
    data = f.readlines()
    total_words = len(data) - 1
    rand_val = randint(1, total_words)
    rand_ans = data[rand_val].strip()
    rand_ans = rand_ans.split(",")
    category = rand_ans[0]
    answer = rand_ans[1]


  return category, answer

def user_answer():
  category = input("""
Decide on a word for the other play to guess!
Firstly, enter the category of your chosen word: """)
  while 1:
    answer = input("Now enter the word: ")
    if answer.isalpha():
      break
    else:
      print("Don't cheat! Enter letters only!!!")
  return category, answer

def starting_letters(answer):
  length = len(answer)
  num_hints = length // 3
  hint_pos = sample(range(1, length), num_hints)

  guess = ["*"] * length
  for i in hint_pos:
    for j in range(len(answer)):
      if answer[j] == answer[i]:
        guess[j] = answer[j]

  return guess

def hangman(num_wrong_guess):
  d={ 1: '---------------------',
 2: '|                    ',
 3: '|         |          ',
 4: '|         O          ',
 5: '|        /|           ',
 6: '|       / |            ',
 7: '|        /|\           ',
 8: '|       / | \            ',
 9: '|        /            ',
 10: '|       /              ',
 11: '|        / \           ',
 12: '|       /   \           ' }

  """
  Draw the hangman picture based on number of wrong guesses.

  Parameters:
  num_wrong_guess (int): Current number of wrong guesses so far

  Returns:
  None
  """
  
  if num_wrong_guess >= 1:
    print("-" * 21)
  if num_wrong_guess == 2:
    for i in range(10):
      print(d[2])
  if num_wrong_guess == 3: 
    for i in range(3):
      print(d[3])
    for i in range(7):
      print(d[2])
          
  if num_wrong_guess == 4:
    for i in range(3):
      print(d[3])
    print(d[4])
    for i in range(6):
      print(d[2])
  if num_wrong_guess == 5:
    for i in range(3):
      print(d[3])
    print(d[4])
    for i in range(3):
      print(d[3])
    for i in range(3):
      print(d[2])
  elif num_wrong_guess == 6:
      for i in range(3):
        print(d[3])
      for i in range(4,7):  
          print(d[i]) 
      print(d[3])
      for i in range(3):
        print(d[2])
  elif num_wrong_guess == 7:
      for i in range(3):
        print(d[3])
      print(d[4])
      print(d[7])
      print(d[8]) 
      print(d[3])
      for i in range(3):
        print(d[2])
  elif num_wrong_guess == 8:
      for i in range(3):
        print(d[3])
      print(d[4])
      print(d[7])
      print(d[8]) 
      print(d[3])
      print(d[9])
      print(d[10])
      print(d[2])
  elif num_wrong_guess == 9:
      for i in range(3):
        print("|         |          ")
      print(d[4])
      print(d[7])
      print(d[8]) 
      print(d[3])
      print(d[11])
      print(d[12])
      print(d[2])
  else:
      pass

def display_interface(category, guess, num_wrong_guess, max_wrong_guess):
  header()
  hangman(num_wrong_guess)
  print("\n\n**********\n\nCategory:", category.capitalize(), "\n\n**********")
  print("\nNumber of wrong guesses:", str(num_wrong_guess) + "/" + str(max_wrong_guess), "\n")
  for i in guess:
    if i == "*":
      print("_", end = " ")
    else:
      print(i.upper(), end = " ")  
  pass
  

def get_guess(answer):
  # Prevent input from appearing in wrong position
  
  
  # Keep asking user for input until it is valid (only letters no other stuff)
  # Convert all to lowercase before returning
  while 1:
    user_input = input("\n\nPlease enter your guess (letter or entire word): ")
    if len(user_input) == 1 and user_input.isalpha():
      break
    elif len(user_input) == len(answer) and user_input.isalpha():
      break
    else:
      print("Invalid input! Please enter a letter.")

  return user_input.lower()

def check_guess(answer, guess, user_input, num_wrong_guess):
  if len(user_input) == len(answer) and user_input.isalpha():
    if user_input.lower() == answer.lower():
      return list(answer), num_wrong_guess
  user_input = user_input.lower()
  answer = answer.lower()
    
  if user_input in answer:
    for j in range(len(answer)):
      if answer[j] == user_input:
        guess[j] = user_input
  else:
    num_wrong_guess += 1
    
  return guess, num_wrong_guess

def check_solved(answer, guess):
  for i in range(len(guess)):
    if guess[i].lower() != answer[i].lower():
      return 0
  
  return 1


def game(category, answer, max_wrong_guess):
  # Variables to keep track of current gameplay
  guess = starting_letters(answer)
  num_wrong_guess = 0

  while 1:
    clear_terminal()

    # Display game interface
    display_interface(category, guess, num_wrong_guess, max_wrong_guess)

    # Get user's guess
    letter = get_guess(answer)

    # Check user's guess
    guess, num_wrong_guess = check_guess(answer, guess, letter, num_wrong_guess)

    # Check if solved
    solved = check_solved(answer, guess)

    if solved:
      clear_terminal()
      display_interface(category, guess, num_wrong_guess, max_wrong_guess)
      print("\n\nCongratulations you solved it!")
      return 1

    if num_wrong_guess >= max_wrong_guess:
      clear_terminal()
      display_interface(category, guess, num_wrong_guess, max_wrong_guess)
      # print("\n\n===============")
      # print("  GAME OVER!")
      # print("===============")
      print("\n\nThe answer was", answer.lower() + ".")
      return 0

def single_player(max_wrong_guess):
  current_score = 0

  while 1:
    category, answer = generate_answer()
    round_result = game(category, answer, max_wrong_guess)
    if round_result == 0:
      print("\nGAME OVER!")
      print("Score:", current_score)
      break
    current_score += 1

    usr_continue = input("Current Score: " + str(current_score) + "\nType 'exit' to end game or press 'enter' to continue...\n")
    if usr_continue.lower() == "exit":
      print("\nGAME OVER!")
      print("Score:", current_score)
      break

def two_player(max_wrong_guess):
  current_scores = [0, 0]
  current_player = 0

  player_1 = input("\nPlease enter Player 1's name\n")
  player_2 = input("\nPlease enter Player 2's name\n")

  while 1:
    category, answer = user_answer()
    round_result = game(category, answer, max_wrong_guess)
    current_player = (current_player + 1) % 2
    if round_result:
      current_scores[current_player] += 1
    

    usr_continue = input(f"""
Current Scores
{player_1}: {str(current_scores[0])}
{player_2}: {str(current_scores[1])}
\nType 'exit' to end game or press 'enter' to continue...\n""")
    if usr_continue.lower() == "exit":
      print("\nGAME OVER!")
      print(f"{player_1}: ", current_scores[0])
      print(f"{player_2}: ", current_scores[1])
      break

def main():
  header()

  # Game settings
  max_wrong_guess = 9

  # Show main menu and get user option
  option = main_menu()

  # Get answer based on user selection:
  if option == 1:
    single_player(max_wrong_guess)
  elif option == 2:
    two_player(max_wrong_guess)
  else:
    raise Exception("Unexpected 'option' value")

  return

if __name__ == "__main__":
  if test:
    print("<<< TESTING >>>")

    print("<<< header() >>>")
    header()
    input()

    print("<<< how_to_play() >>>")
    how_to_play()
    input()

    print("<<< main_menu() >>>")
    print("Option returned:", main_menu())
    input()

    print("<<< generate_answer() >>>")
    category, answer = generate_answer()
    print("Category returned:", category)
    print("Answer returned:", answer)
    input()

    print("<<< user_answer() >>>")
    print(user_answer())
    input()

    print("<<< starting_letters() >>>")
    print(starting_letters("alligator"))
    input()

    print("<<< hangman() >>>")
    hangman(5)
    input()

    print("<<< display_interface() >>>")
    display_interface("Test Category", ["*", "A", "*", "E", "*", "*", "E", "*", "*", "*"], 3, 9)
    input()

    print("<<< get_guess() >>>")
    print("String returned:", get_guess("watermelon"))
    input()

    print("<<< check_guess() >>>")
    print(check_guess("DAY", ["*", "*", "*"], "A", 1))
    # Expected return ["*", "A", "*"], 1
    print(check_guess("day", ["*", "*", "*"], "A", 1))
    # Expected return ["*", "A", "*"], 1
    print(check_guess("day", ["*", "*", "*"], "a", 1))
    # Expected return ["*", "A", "*"], 1
    print(check_guess("DAY", ["*", "*", "*"], "M", 1))
    # Expected return ["*", "*", "*"], 2
    print(check_guess("DAY", ["*", "*", "*"], "DAY", 1))
    # Expected return ["*", "*", "*"], 2
    input()

    print("<<< check_solved() >>>")
    print(check_solved("DAY", ["D", "A", "Y"]))
    # Expect 1
    print(check_solved("day", ["D", "A", "Y"]))
    # Expect 1
    print(check_solved("DAY", ["D", "*", "Y"]))
    # Expect 0
    
    print("<<< game() >>>")
    game("test", "hi", 2)
    input()

    print("<<< single_player() >>>")
    single_player(2)
    input()

    print("<<< two_player() >>>")
    two_player(2)
    input()

    print("<<< END OF TEST >>>")

  else:
    main()